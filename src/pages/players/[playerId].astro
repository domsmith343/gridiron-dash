---
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  // Generate static paths for common player IDs
  const playerIds = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];
  
  return playerIds.map((playerId) => ({
    params: { playerId },
  }));
}

// Define a type for Player stats
interface PlayerStats {
  passingYards?: number;
  touchdowns?: number;
  interceptions?: number;
  receptions?: number;
  receivingYards?: number;
  sacks?: number;
  tackles?: number;
  forcedFumbles?: number;
}

// Define a type for our Player object
interface Player {
  id: string;
  name: string;
  team: string;
  position: string;
  jersey: string;
  photoUrl: string;
  stats: PlayerStats;
}

// Get the playerId from the URL
const { playerId } = Astro.params;

// Mock player data - in a real app, you'd fetch this from a database or API
const mockPlayers: Record<string, Player> = {
  '1': { id: '1', name: 'Patrick Mahomes', team: 'Kansas City Chiefs', position: 'QB', jersey: '15', photoUrl: '/images/players/mahomes.png', stats: { passingYards: 5250, touchdowns: 41, interceptions: 12 } },
  '2': { id: '2', name: 'Justin Jefferson', team: 'Minnesota Vikings', position: 'WR', jersey: '18', photoUrl: '/images/players/jefferson.png', stats: { receptions: 128, receivingYards: 1809, touchdowns: 8 } },
  '3': { id: '3', name: 'Micah Parsons', team: 'Dallas Cowboys', position: 'LB', jersey: '11', photoUrl: '/images/players/parsons.png', stats: { sacks: 13.5, tackles: 65, forcedFumbles: 3 } },
};

const player = mockPlayers[String(playerId)];

let pageTitle = 'Player Profile';
if (player) {
  pageTitle = `${player.name} - Profile`;
}
---

<Layout title={pageTitle}>
  <div class="container mx-auto px-4 py-8">
    {player ? (
      <div class="bg-white shadow-xl rounded-lg overflow-hidden">
        <div class="bg-gray-800 text-white p-4 md:p-6 flex flex-col md:flex-row items-center">
          {player.photoUrl && (
            <img src={player.photoUrl} alt={`${player.name}`} class="w-32 h-32 md:w-48 md:h-48 rounded-full border-4 border-gray-600 object-cover mr-0 md:mr-6 mb-4 md:mb-0" />
          )}
          <div>
            <h1 class="text-3xl md:text-4xl font-bold">{player.name}</h1>
            <p class="text-xl md:text-2xl text-gray-300">{player.position} | #{player.jersey} | {player.team}</p>
          </div>
        </div>

        <div class="p-4 md:p-6">
          <h2 class="text-2xl font-semibold text-gray-700 mb-4">Season Stats</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            {player.position === 'QB' && (
              <>
                <div class="bg-gray-100 p-4 rounded-lg">
                  <p class="text-sm text-gray-500">Passing Yards</p>
                  <p class="text-2xl font-bold text-gray-800">{player.stats.passingYards}</p>
                </div>
                <div class="bg-gray-100 p-4 rounded-lg">
                  <p class="text-sm text-gray-500">Touchdowns</p>
                  <p class="text-2xl font-bold text-gray-800">{player.stats.touchdowns}</p>
                </div>
                <div class="bg-gray-100 p-4 rounded-lg">
                  <p class="text-sm text-gray-500">Interceptions</p>
                  <p class="text-2xl font-bold text-gray-800">{player.stats.interceptions}</p>
                </div>
              </>
            )}
            {player.position === 'WR' && (
              <>
                <div class="bg-gray-100 p-4 rounded-lg">
                  <p class="text-sm text-gray-500">Receptions</p>
                  <p class="text-2xl font-bold text-gray-800">{player.stats.receptions}</p>
                </div>
                <div class="bg-gray-100 p-4 rounded-lg">
                  <p class="text-sm text-gray-500">Receiving Yards</p>
                  <p class="text-2xl font-bold text-gray-800">{player.stats.receivingYards}</p>
                </div>
                <div class="bg-gray-100 p-4 rounded-lg">
                  <p class="text-sm text-gray-500">Touchdowns</p>
                  <p class="text-2xl font-bold text-gray-800">{player.stats.touchdowns}</p>
                </div>
              </>
            )}
            {player.position === 'LB' && (
              <>
                <div class="bg-gray-100 p-4 rounded-lg">
                  <p class="text-sm text-gray-500">Sacks</p>
                  <p class="text-2xl font-bold text-gray-800">{player.stats.sacks}</p>
                </div>
                <div class="bg-gray-100 p-4 rounded-lg">
                  <p class="text-sm text-gray-500">Tackles</p>
                  <p class="text-2xl font-bold text-gray-800">{player.stats.tackles}</p>
                </div>
                <div class="bg-gray-100 p-4 rounded-lg">
                  <p class="text-sm text-gray-500">Forced Fumbles</p>
                  <p class="text-2xl font-bold text-gray-800">{player.stats.forcedFumbles}</p>
                </div>
              </>
            )}
          </div>

          <div class="mt-6">
            <h3 class="text-xl font-semibold text-gray-700 mb-2">Game Logs (Placeholder)</h3>
            <p class="text-gray-600">Detailed game-by-game statistics will be shown here.</p>
          </div>

          <div class="mt-6">
            <h3 class="text-xl font-semibold text-gray-700 mb-2">News & Updates (Placeholder)</h3>
            <p class="text-gray-600">Latest news articles and injury updates related to the player.</p>
          </div>
        </div>
      </div>
    ) : (
      <div class="text-center py-10">
        <h1 class="text-2xl font-semibold text-gray-700">Player Not Found</h1>
        <p class="text-gray-500">Sorry, we couldn't find a player with the ID: {playerId}.</p>
        <a href="/" class="mt-4 inline-block bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
          Go to Homepage
        </a>
      </div>
    )}
  </div>
</Layout>

<style>
  /* You can add component-specific styles here if needed, or use Tailwind utility classes */
</style>
